===========================
System Behavior Design with Frame
===========================

Systems Engineering methodology broadly system aspects into two categories -
**structural** and **behavioral**. Frame
is a **Domain Specific Language (DSL)** focused on defining system behavior in particular
and is based on ideas from `UML Statecharts
<https://www.sciencedirect.com/science/article/pii/0167642387900359/>`_. 

Unlike the visual design 
paradigm of Statecharts which anticipated developers would create complex software sysems using visual modeling tools, 
Frame is a pragmatically textual language. You can create a Frame program using Notepad.

However, Frame still provides all the benefits of visual design as 
statecharts can be generted from a Frame system specification (spec) and used as both an aide during 
development as well as being intrincially documented after completion. 

Although Frame is starting to take steps to being a general purpose programming language, its 
differentiator from other languages is its introduction of notation specifically related to
Frame's concepts related to **systems** design. 

System Controllers
------------------

Currently Frame programs are not compiled to a binary or run in an interpreter. Instead they are 
transpiled into other languages using a CLI based tool called the Framepiler. This approach was 
chosen to deliver the greatest impact and adoption by enabling developers to incorporate 
Frame technology into any existing project.

Although Frame supports true functions as of v0.11, the focus of the language is squarely on Frame as 
a systems development language. Frame transpiles system specs into target language objects 
called "system controllers". In object-oriented languages, which are the only kind of languages 
currently supported, these system controllers are specially constructed object-oriented classes.

System controllers appear at first glance to be complex due to the runtime mechanisms Frame notation 
requires. However most of this machinery can be ignored by developers and the important 
parts are very standardized and easy to understand. We will explore the code generated by 
Frame in the more advanced sections of this documentation. 

Defining a System 
------------------

In Frame notation a Frame system specification starts with the `#` token and the name of the system
and terminated with the `##` token:

``Frame System``

.. code-block::
    :caption: An Empty System 

    #HelloWorldSystem
    ##

At this point `#HelloWorldSystem` is an empty system spec and has no behavior. Next we will add the 
structure needed to start to add functionality to our system. 

Blocks
======

Frame specs are organized internally into four optional *blocks*:

#. Interface - the public methods of the system 
#. Machine   - the system state machine 
#. Actions   - private routines implementing behavior 
#. Domain    - private system data 


Although each (or all) blocks are optional, if present they must be defined in a specified order.

.. code-block::
    :caption: System Blocks 

    #HelloWorldSystem

    -interface-
    -machine-
    -actions-
    -domain-

    ##

In the next articles in this series, we will investigate role each of these blocks plays 
in defining a Frame system. 
